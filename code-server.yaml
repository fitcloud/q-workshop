AWSTemplateFormatVersion: "2010-09-09"
Description: Saltware Immersion Day with Amazon Q
Parameters:
  CodeServerVersion:
    Type: String
    Description: Default code-server version to use
    Default: "4.104.2"
  AmiParameterStoreName:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64"
Mappings:
  PrefixListID:
    ap-northeast-2:
      PrefixList: pl-22a6434b
    us-east-1:
      PrefixList: pl-3b927c52
    us-west-2:
      PrefixList: pl-82a045eb
Resources:
  ## NETWORK
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  # PUBLIC SUBNET
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: kubernetes.io/role/elb
          Value: 1
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnet1
  # VS CODE SERVER
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for IDE
      SecurityGroupIngress:
        - Description: Allow HTTP from CloudFront
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourcePrefixListId: !FindInMap [PrefixListID, !Ref "AWS::Region", PrefixList]
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: -1
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
  WorkshopIdeLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Join ["", [WorkshopIdeLambdaPolicy-, !Ref AWS::Region]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - iam:PassRole
                  - ssm:SendCommand
                  - ssm:GetCommandInvocation
                Resource: "*"
  WorkshopIdeBootstrapInstanceLambda:
    Type: Custom::WorkshopIdeBootstrapInstanceLambda
    DependsOn:
      - WorkshopIdeLambdaExecutionRole
    Properties:
      ServiceToken: !GetAtt WorkshopIdeBootstrapInstanceLambdaFunction.Arn
      REGION:
        Ref: AWS::Region
      InstanceId:
        Ref: WorkshopIdeInstance
      SsmDocument:
        Ref: WorkshopIdeSSMDocument
  WorkshopIdeBootstrapInstanceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt WorkshopIdeLambdaExecutionRole.Arn
      Runtime: python3.12
      MemorySize: 256
      Timeout: "900"
      Code:
        ZipFile: |
          from __future__ import print_function

          import json
          import logging
          import os
          import time
          import traceback

          import boto3
          import cfnresponse

          logger = logging.getLogger(__name__)


          def lambda_handler(event, context):
              print(event.values())
              print(f"context: {context}")
              responseData = {}

              status = cfnresponse.SUCCESS

              if event["RequestType"] == "Delete":
                  responseData = {"Success": "Custom Resource removed"}
                  cfnresponse.send(
                      event, context, status, responseData, "CustomResourcePhysicalID"
                  )
              else:
                  try:
                      ssm = boto3.client("ssm")
                      instance_id = event["ResourceProperties"]["InstanceId"]
                      ssm_document = event["ResourceProperties"]["SsmDocument"]
                      print("Sending SSM command...")

                      response = ssm.send_command(
                          InstanceIds=[instance_id], DocumentName=ssm_document
                      )

                      command_id = response["Command"]["CommandId"]
                      waiter = ssm.get_waiter("command_executed")

                      waiter.wait(
                          CommandId=command_id,
                          InstanceId=instance_id,
                          WaiterConfig={"Delay": 10, "MaxAttempts": 60},
                      )

                      responseData = {
                          "Success": "Started bootstrapping for instance: " + instance_id
                      }
                      cfnresponse.send(
                          event, context, status, responseData, "CustomResourcePhysicalID"
                      )

                  except Exception as e:
                      status = cfnresponse.FAILED
                      print(traceback.format_exc())
                      responseData = {"Error": traceback.format_exc(e)}
                  finally:
                      cfnresponse.send(
                          event, context, status, responseData, "CustomResourcePhysicalID"
                      )
  WorkshopIdeSSMDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      DocumentFormat: YAML
      Content:
        schemaVersion: "2.2"
        description: Bootstrap VS Code server Instance
        mainSteps:
          - action: aws:runShellScript
            name: WorkshopIdebootstrap
            inputs:
              runCommand:
                - !Sub |
                  set -e

                  dnf install -y git tar gzip vim nodejs npm make gcc g++ argon2

                  dnf copr enable -y @caddy/caddy epel-9-x86_64
                  dnf install -y caddy
                  systemctl enable --now caddy

                  tee /etc/caddy/Caddyfile <<EOF
                  http://${WorkshopIdeCloudFrontDistribution.DomainName} {
                    reverse_proxy 127.0.0.1:8889
                  }
                  EOF

                  systemctl restart caddy

                  tee /etc/profile.d/custom_prompt.sh <<EOF
                  #!/bin/sh

                  export PROMPT_COMMAND='export PS1="\u:\w:$ "'
                  EOF

                  export AWS_REGION="${AWS::Region}"

                  cat <<"EOT" | sudo -E -H -u ec2-user bash
                  set -e

                  mkdir -p ~/environment

                  curl -LsSf https://astral.sh/uv/install.sh | sh

                  curl -Ls -o /tmp/coder.rpm https://github.com/coder/code-server/releases/download/v${CodeServerVersion}/code-server-${CodeServerVersion}-amd64.rpm
                  sudo rpm -U "/tmp/coder.rpm"

                  sudo systemctl enable --now code-server@ec2-user

                  mkdir -p ~/.config/code-server
                  touch ~/.config/code-server/config.yaml
                  tee ~/.config/code-server/config.yaml <<EOF
                  cert: false
                  auth: none
                  bind-addr: 127.0.0.1:8889
                  EOF

                  mkdir -p ~/.local/share/code-server/User
                  touch ~/.local/share/code-server/User/settings.json
                  cat << EOF > ~/.local/share/code-server/User/settings.json
                  {
                    "extensions.autoUpdate": false,
                    "extensions.autoCheckUpdates": false,
                    "security.workspace.trust.enabled": false,
                    "task.allowAutomaticTasks": "on",
                    "telemetry.telemetryLevel": "off",
                    "workbench.startupEditor": "none"
                  }
                  EOF

                  mkdir -p ~/environment/.vscode
                  cat << EOF > ~/environment/.vscode/settings.json
                  {
                    "files.exclude": {
                      "**/.*": true
                    }
                  }
                  EOF

                  echo '{ "query": { "folder": "/home/ec2-user/environment" } }' > ~/.local/share/code-server/coder.json
                  echo 'export AWS_REGION=${AWS::Region}' >> ~/.bashrc
                  echo 'export AWS_ACCOUNT_ID=${AWS::AccountId}' >> ~/.bashrc
                  echo 'git config --global credential.helper store' >>~/.bashrc
                  EOT

                  systemctl restart code-server@ec2-user
                  sudo -u ec2-user --login code-server --install-extension AmazonWebServices.amazon-q-vscode --force

  WorkshopIdeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      Path: "/"
  WorkshopIdeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: WorkshopIdeRole
  WorkshopIdeInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiParameterStoreName
      InstanceType: t3.medium
      BlockDeviceMappings:
        - Ebs:
            VolumeSize: 20
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
          DeviceName: /dev/xvda
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref WorkshopIdeInstanceProfile

  # CLOUDFRONT
  WorkshopIdeCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 86400
        MaxTTL: 31536000
        MinTTL: 1
        Name: !Ref AWS::StackName
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: all
          EnableAcceptEncodingGzip: False
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - Accept-Charset
              - Authorization
              - Origin
              - Accept
              - Referer
              - Host
              - Accept-Language
              - Accept-Encoding
              - Accept-Datetime
          QueryStringsConfig:
            QueryStringBehavior: all
  WorkshopIdeCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: True
        HttpVersion: http2
        CacheBehaviors:
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            Compress: False
            OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
            TargetOriginId: !Sub CloudFront-${AWS::StackName}
            ViewerProtocolPolicy: allow-all
            PathPattern: "/proxy/*"
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
          CachePolicyId: !Ref WorkshopIdeCachePolicy
          OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
          TargetOriginId: !Sub CloudFront-${AWS::StackName}
          ViewerProtocolPolicy: allow-all
        Origins:
          - DomainName: !GetAtt WorkshopIdeInstance.PublicDnsName
            Id: !Sub CloudFront-${AWS::StackName}
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
Outputs:
  IdeUrl:
    Value: !Sub https://${WorkshopIdeCloudFrontDistribution.DomainName}