
AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template to deploy VS Code Server'

Parameters:
  VSCodeUser:
    Type: String
    Description: UserName for Visual Studio Code Server
    Default: ubuntu
  InstanceName:
    Type: String
    Description: Name of the VS Code EC2 Instance Name
    Default: VSCodeServer
  ClusterName:
    Type: String
    Description: EKS Cluster name
    Default: eks-automode
  InstanceVolumeSize:
    Type: Number
    Description: The VS Code EC2 instance volume size in GB
    Default: 50
  InstanceType:
    Description: Type of VS Code EC2 instance
    Type: String
    Default: t4g.xlarge
    AllowedValues: [
      t4g.nano, t4g.micro, t4g.small, t4g.medium, t4g.large, t4g.xlarge, t4g.2xlarge
    ]
  InstanceAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Description: AMI ID parameter path for the VSCode instance
    Default: '/aws/service/canonical/ubuntu/server/jammy/stable/current/arm64/hvm/ebs-gp2/ami-id'
    # aws ssm get-parameters-by-path --path "/aws/service/canonical/ubuntu/" --recursive --query "Parameters[*].Name"  > canonical-ami.txt
    AllowedValues: [
      '/aws/service/canonical/ubuntu/server/focal/stable/current/arm64/hvm/ebs-gp2/ami-id',
      '/aws/service/canonical/ubuntu/server/focal/stable/current/amd64/hvm/ebs-gp2/ami-id',
      '/aws/service/canonical/ubuntu/server-minimal/focal/stable/current/arm64/hvm/ebs-gp2/ami-id',
      '/aws/service/canonical/ubuntu/server-minimal/focal/stable/current/amd64/hvm/ebs-gp2/ami-id',
      '/aws/service/canonical/ubuntu/server/jammy/stable/current/arm64/hvm/ebs-gp2/ami-id',
      '/aws/service/canonical/ubuntu/server/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id',
      '/aws/service/canonical/ubuntu/server-minimal/jammy/stable/current/arm64/hvm/ebs-gp2/ami-id',
      '/aws/service/canonical/ubuntu/server-minimal/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id',
      '/aws/service/canonical/ubuntu/server/noble/stable/current/arm64/hvm/ebs-gp3/ami-id',
      '/aws/service/canonical/ubuntu/server/noble/stable/current/amd64/hvm/ebs-gp3/ami-id',
      '/aws/service/canonical/ubuntu/server-minimal/noble/stable/current/arm64/hvm/ebs-gp3/ami-id',
      '/aws/service/canonical/ubuntu/server-minimal/noble/stable/current/amd64/hvm/ebs-gp3/ami-id'
    ]
  WorkFolder:
    Type: String
    Description: Folder to open in VS Code server
    Default: /Workshop
  DevServerBasePath:
    Type: String
    Description: The base path for the application to be added to nginx sites-available list
    Default: app
  DevServerPort:
    Type: Number
    Description: The port for the DevServer
    Default: 8081
  AssetZipS3Path:
    Description: The S3 path holding the asset zip file to be copied into the home folder. To leave the empty, leave blank.
    Type: String
    Default: ''


Resources:
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open to application access from outside
      VpcId:
        Fn::ImportValue: MonoVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: "Allow access from clients to website"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: "Allow access from clients to website"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: "Website access to clients"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: "Website access to clients"
      Tags:
        - Key: Name
          Value: MonoToMicroEC2SG
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W9
            reason:  First usecase, the app content is stored in EC2 and the DNS name for the Amazon EC2 instance that is running our Unishop application is exposed.
          - id: W2
            reason:  First usecase, the app content is stored in EC2 and the DNS name for the Amazon EC2 instance that is running our Unishop application is exposed.
          - id: W5
            reason:  First usecase, the app content is stored in EC2 and the DNS name for the Amazon EC2 instance that is running our Unishop application is exposed.


  SecretPlaintextLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - !Sub lambda.${AWS::URLSuffix}
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AwsSecretsManager
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref VSCodeSecret

  SecretPlaintextLambda:
    Type: AWS::Lambda::Function
    # Metadata:
    #   cfn_nag:
    #     rules_to_suppress:
    #       - id: W58
    #         reason: Cloud9LambdaExecutionRole has the AWSLambdaBasicExecutionRole managed policy attached, allowing writing to CloudWatch logs
    #       - id: W89
    #         reason: Bootstrap function does not need the scaffolding of a VPC or provisioned concurrency
    #       - id: W92
    #         reason: Bootstrap function does not need provisioned concurrency
    Properties:
      Description: Return the value of the secret
      Handler: index.lambda_handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 10
      Architectures:
        - arm64
      Role: !GetAtt SecretPlaintextLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def is_valid_json(json_string):
            logger.debug('Calling is_valid_jason: %s', json_string)
            try:
              json.loads(json_string)
              logger.info('Secret is in json format')
              return True
            except json.JSONDecodeError:
              logger.info('Secret is in string format')
              return False
          def lambda_handler(event, context):
            try:
              if event['RequestType'] == 'Delete':
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData={}, reason='No action to take')
              else:
                secret_name = (event['ResourceProperties']['SecretArn'])
                secrets_mgr = boto3.client('secretsmanager')
                secret = secrets_mgr.get_secret_value(SecretId = secret_name)
                logger.info('Getting secret from %s', secret_name)
                secret_value = secret['SecretString']
                logger.debug('secret_value: %s', secret_value)
                responseData = {}
                if is_valid_json(secret_value):
                  responseData = secret_value
                else:
                  responseData = {'secret': secret_value}
                logger.debug('responseData: %s', responseData)
                logger.debug('type(responseData): %s', type(responseData))
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData=json.loads(responseData), reason='OK', noEcho=True)
            except Exception as e:
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData={}, reason=str(e))

  ########### Secret Resources ###########
  VSCodeSecret:
    # Metadata:
    #   cfn_nag:
    #     rules_to_suppress:
    #       - id: W77
    #         reason: Secrets Manager Secret should explicitly specify KmsKeyId to allow secret to be shared cross-account - this is not required for this secret as it is generated per-account.
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Name: !Ref InstanceName
      Description: VSCode user details
      GenerateSecretString:
        PasswordLength: 16
        SecretStringTemplate: !Sub '{"username":"${VSCodeUser}"}'
        GenerateStringKey: 'password'
        ExcludePunctuation: true

  SecretPlaintext:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SecretPlaintextLambda.Arn
      ServiceTimeout: 20
      SecretArn: !Ref VSCodeSecret


  VSCodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Fn::ImportValue: EKSVSCodeInstanceRole

  VSCodeInstance:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - Ebs:
            VolumeSize: !Ref InstanceVolumeSize
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
          DeviceName: /dev/sda1
      Monitoring: true
      ImageId: !Ref InstanceAmiId
      SubnetId:
        Fn::ImportValue: MonoVPCPublicSubnet
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      IamInstanceProfile: !Ref VSCodeInstanceProfile
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash -xe
          AWS_REGION=${AWS::Region}
          CLUSTER_NAME="eks-automode"
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          apt-get update
          apt-get install -y python3-pip
          pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --region ${AWS::Region}  -c ascending --resource VSCodeInstance
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --region ${AWS::Region} --resource=VSCodeInstance
      Tags:
        - Key: Name
          Value: !Ref InstanceName
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          ascending:
            - cloudwatchagent
            - install
        cloudwatchagent:
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              mode: '000644'
              owner: root
              group: root
              content: |
                {
                    "agent": {
                        "metrics_collection_interval": 60
                    },
                    "logs": {
                        "logs_collected": {
                            "files": {
                                "collect_list": [
                                    {
                                        "file_path": "/var/log/cfn-init-cmd.log",
                                        "log_group_name": "VSCodeCFNInitLogs",
                                        "log_stream_name": "cfn-init-cmd"
                                    },
                                    {
                                        "file_path": "/var/log/cfn-init.log",
                                        "log_group_name": "VSCodeCFNInitLogs",
                                        "log_stream_name": "cfn-init"
                                    },
                                    {
                                        "file_path": "/var/log/cloud-init.log",
                                        "log_group_name": "VSCodeCFNInitLogs",
                                        "log_stream_name": "cloud-init"
                                    },
                                    {
                                        "file_path": "/var/log/cloud-init-output.log",
                                        "log_group_name": "VSCodeCFNInitLogs",
                                        "log_stream_name": "cloud-init-output"
                                    },
                                    {
                                        "file_path": "/var/log/user-data.log",
                                        "log_group_name": "VSCodeCFNInitLogs",
                                        "log_stream_name": "user-data"
                                    }
                                ]
                            }
                        }
                    }
                }

        install:
          packages:
            apt:
              curl: []
              unzip: []
              apt-transport-https: []
              ca-certificates: []
              gnupg: []
              lsb-release: []
              python3-pip: []
              python3.10-venv: []
              python3-boto3: []
              python3-pytest: []
              whois: []
              argon2: []
              openssl: []
              nginx: []
          commands:
            00_add_user:
              command: !Sub |
                if [ "${VSCodeUser}" == "ubuntu" ]
                then
                  echo 'Using existing user: ${VSCodeUser}'
                else
                  echo 'Adding user: ${VSCodeUser}'
                  adduser --disabled-password --gecos '' ${VSCodeUser}
                  echo "${VSCodeUser}:${SecretPlaintext.password}" | chpasswd
                  usermod -aG sudo ${VSCodeUser}
                fi
                echo "Checking configuration"
                hostname: ${InstanceName}
                cat /etc/passwd | grep ${VSCodeUser}
              ignoreErrors: "false"
            01_install_aws_cli:
              command: |
                curl -fsSL https://awscli.amazonaws.com/awscli-exe-linux-$(uname -m).zip -o /tmp/aws-cli.zip
                unzip -q -d /tmp /tmp/aws-cli.zip
                /tmp/aws/install
                rm -rf /tmp/aws
                echo "AWS CLI installed. Checking configuration"
                aws --version
              ignoreErrors: "false"
            02_install_docker:
              command: !Sub |
                # curl -fsSL https://get.docker.com | sh
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor | tee /usr/share/keyrings/docker-archive-keyring.gpg > /dev/null
                echo "deb [signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release --codename --short) stable" | tee -a /etc/apt/sources.list.d/docker.list
                apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y docker-ce docker-ce-cli containerd.io
                usermod -aG docker ${VSCodeUser}
                echo "Docker installed. Checking configuration"
                docker --version
              ignoreErrors: "false"
            03_install_git:
              command: !Sub |
                add-apt-repository ppa:git-core/ppa
                apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common
                apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y git
                sudo -u ${VSCodeUser} git config --global user.email "participant@example.com"
                sudo -u ${VSCodeUser} git config --global user.name "Workshop Participant"
                sudo -u ${VSCodeUser} git config --global init.defaultBranch "main"
                echo "Git installed. Checking configuration"
                git --version
              ignoreErrors: "false"
            05_install_python:
              command: !Sub |
                echo 'alias pytest=pytest-3' | tee -a /home/${VSCodeUser}/.bashrc
                echo "Python and Pip installed. Checking configuration"
                python3 --version
                pip3 --version
              ignoreErrors: "false"
            06_download_assets:
              command: !Sub |
                mkdir -p ${WorkFolder}
                chown -R ${VSCodeUser}:${VSCodeUser} ${WorkFolder}
                cd ${WorkFolder}
                rm -rf *
                if [ -z "${AssetZipS3Path}" ]
                then
                  echo "No assets"
                else
                  sudo -u ${VSCodeUser} git init
                  aws s3 cp s3://${AssetZipS3Path} /tmp/assets.zip
                  unzip -o /tmp/assets.zip
                  rm -f /tmp/assets.zip
                  chown -R ${VSCodeUser}:${VSCodeUser} .
                  sudo -u ${VSCodeUser} git add .
                  sudo -u ${VSCodeUser} git commit -m 'Initial commit'
                fi
              ignoreErrors: "false"
            07_update_profile:
              command: !Sub |
                echo LANG=en_US.utf-8 | tee -a /etc/environment
                echo LC_ALL=en_US.UTF-8 | tee -a /etc/environment
                echo 'PATH=$PATH:/home/${VSCodeUser}/.local/bin' | tee -a /home/${VSCodeUser}/.bashrc
                echo 'export PATH' | tee -a /home/${VSCodeUser}/.bashrc
                echo 'export AWS_REGION=${AWS::Region}' | tee -a /home/${VSCodeUser}/.bashrc
                echo 'export AWS_ACCOUNTID=${AWS::AccountId}' | tee -a /home/${VSCodeUser}/.bashrc
                echo 'export CLUSTER_NAME=${ClusterName}' | tee -a /home/${VSCodeUser}/.bashrc
                echo 'export NEXT_TELEMETRY_DISABLED=1' | tee -a /home/${VSCodeUser}/.bashrc
                touch /home/${VSCodeUser}/.hushlogin
                chown -R ${VSCodeUser}:${VSCodeUser} /home/${VSCodeUser}
              ignoreErrors: "false"
            08_configure_code_server:
              command: !Sub |
                export HOME=/home/${VSCodeUser}
                curl -fsSL https://code-server.dev/install.sh | sh -s -- 2>&1
                systemctl enable --now code-server@${VSCodeUser} 2>&1
                rm /etc/nginx/sites-enabled/default
                tee /etc/nginx/sites-available/code-server <<EOF
                server {
                  listen 80;
                  listen [::]:80;
                  location / {
                    proxy_pass http://localhost:8080/;
                    proxy_set_header Host \$host;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection upgrade;
                    proxy_set_header Accept-Encoding gzip;
                  }
                  location /${DevServerBasePath} {
                    proxy_pass http://localhost:${DevServerPort}/${DevServerBasePath};
                    proxy_set_header Host \$host;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection upgrade;
                    proxy_set_header Accept-Encoding gzip;
                  }
                }
                EOF
                mkdir -p /home/${VSCodeUser}/.config/code-server
                tee /home/${VSCodeUser}/.config/code-server/config.yaml <<EOF
                bind-addr: 127.0.0.1:8080
                auth: password
                hashed-password: "$(echo -n ${SecretPlaintext.password} | argon2 $(openssl rand -base64 12) -e)"
                cert: false
                EOF
                mkdir -p /home/${VSCodeUser}/.local/share/code-server/User/
                tee /home/${VSCodeUser}/.local/share/code-server/User/settings.json <<EOF
                {
                  "extensions.autoUpdate": false,
                  "extensions.autoCheckUpdates": false,
                  "terminal.integrated.cwd": "${WorkFolder}",
                  "telemetry.telemetryLevel": "off",
                  "security.workspace.trust.startupPrompt": "never",
                  "security.workspace.trust.enabled": false,
                  "security.workspace.trust.banner": "never",
                  "security.workspace.trust.emptyWindow": false,
                  "editor.indentSize": "tabSize",
                  "editor.tabSize": 2,
                  "python.testing.pytestEnabled": true,
                  "auto-run-command.rules": [
                    {
                      "command": "workbench.action.terminal.new"
                    }
                  ]
                }
                EOF
                chown -R ${VSCodeUser}:${VSCodeUser} /home/${VSCodeUser}
                systemctl restart code-server@${VSCodeUser}
                ln -s ../sites-available/code-server /etc/nginx/sites-enabled/code-server 2>&1
                systemctl restart nginx
                # sudo -u ${VSCodeUser} --login code-server --install-extension AmazonWebServices.aws-toolkit-vscode --force
                sudo -u ${VSCodeUser} --login code-server --install-extension AmazonWebServices.amazon-q-vscode --force
                sudo -u ${VSCodeUser} --login code-server --install-extension synedra.auto-run-command --force
                sudo -u ${VSCodeUser} --login code-server --install-extension vscjava.vscode-java-pack --force
                sudo -u ${VSCodeUser} --login code-server --install-extension ms-vscode.live-server --force
                chown -R ${VSCodeUser}:${VSCodeUser} /home/${VSCodeUser}
                echo "Nginx installed. Checking configuration"
                nginx -t 2>&1
                systemctl status nginx
                echo "CodeServer installed. Checking configuration"
                code-server -v
                systemctl status code-server@${VSCodeUser}
              ignoreErrors: "false"
            13_git_copy_code:
              command: !Sub |
                cd /Workshop
                git clone https://github.com/skswlsaks/mcp-on-eks
                sudo chown -R ubuntu:ubuntu /Workshop/mcp-on-eks
              ignoreErrors: "false"
            14_eksctl_install:
              command: !Sub |
                ARCH=arm64
                PLATFORM=$(uname -s)_$ARCH
                curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
                curl -sL "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_checksums.txt" | grep $PLATFORM | sha256sum --check
                tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
                sudo mv /tmp/eksctl /usr/local/bin

  ########### CloudFront Resources ###########
  VSCodeInstanceCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 86400
        MaxTTL: 31536000
        MinTTL: 1
        Name: !Join ['-', ['VSCodeServer', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: all
          EnableAcceptEncodingGzip: False
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - Accept-Charset
              - Authorization
              - Origin
              - Accept
              - Referer
              - Host
              - Accept-Language
              - Accept-Encoding
              - Accept-Datetime
          QueryStringsConfig:
            QueryStringBehavior: all

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: True
        HttpVersion: http2
        CacheBehaviors:
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html#managed-cache-policy-caching-disabled
            Compress: False
            OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3 # Managed-AllViewer - see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html#:~:text=When%20using%20AWS,47e4%2Db989%2D5492eafa07d3
            TargetOriginId: !Sub CloudFront-${AWS::StackName}
            ViewerProtocolPolicy: redirect-to-https
            PathPattern: '/proxy/*'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
          CachePolicyId: !Ref VSCodeInstanceCachePolicy
          OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3 # Managed-AllViewer - see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html#:~:text=When%20using%20AWS,47e4%2Db989%2D5492eafa07d3
          TargetOriginId: !Sub CloudFront-${AWS::StackName}
          ViewerProtocolPolicy: redirect-to-https
        Origins:
          - DomainName: !GetAtt VSCodeInstance.PublicDnsName
            Id: !Sub CloudFront-${AWS::StackName}
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
              HTTPPort: 80
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
          MinimumProtocolVersion: TLSv1.2_2018

Outputs:
  URL:
    Description: VSCode-Server URL
    Value: !Sub https://${CloudFrontDistribution.DomainName}/?folder=${WorkFolder}
    Export:
      Name: VSCodeServerURL
  Password:
    Description: VSCode-Server Password
    Value: !GetAtt SecretPlaintext.password
    Export:
      Name: VSCodePassword
